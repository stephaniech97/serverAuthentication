{"version":3,"file":"ActorHttpNodeFetch.js","sourceRoot":"","sources":["ActorHttpNodeFetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActorHttp, IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { IActorArgs } from '@comunica/core';\nimport { IMediatorTypeTime } from '@comunica/mediatortype-time';\nimport 'cross-fetch/polyfill';\n\n/**\n * A node-fetch actor that listens on the 'init' bus.\n *\n * It will call `fetch` with either action.input or action.url.\n */\nexport class ActorHttpNodeFetch extends ActorHttp {\n  public constructor(args: IActorArgs<IActionHttp, IMediatorTypeTime, IActorHttpOutput>) {\n    super(args);\n  }\n\n  public async test(action: IActionHttp): Promise<IMediatorTypeTime> {\n    return { time: Infinity };\n  }\n\n  public run(action: IActionHttp): Promise<IActorHttpOutput> {\n    this.logInfo(action.context, `Requesting ${typeof action.input === 'string' ? action.input : action.input.url}`);\n\n    let url = (<Request> action.input).url;\n    const headers = new Headers(action.init?.headers || {});\n    let credentials = getCredentialsFromUrl(url);\n\n    if (credentials) {\n      // Credentials were found in the url\n      url = getRealUrl(url);\n    } else {\n      // Credentials are now searched in the context\n      const authenticatedUrls = action.context?.get('authenticatedUrls');\n      if (authenticatedUrls) {\n        credentials = authenticatedUrls[url];\n      }\n    }\n\n    // Credentials were passed then add the headers and include credential\n    if (credentials) {\n      // `Basic ${Buffer.from(`${credentials.username}:${credentials.password}`).toString('base64')}`\n      headers.append('Authorization', `Basic ${credentials.username}:${credentials.password}`);\n      if (action.init) {\n        action.init.headers = headers;\n        action.init.credentials = 'include';\n      } else {\n        action.init = { headers, credentials: 'include' };\n      }\n    }\n\n    const options: any = {};\n    Object.assign(options, action.input);\n    options.url = url;\n    return fetch(options, action.init);\n  }\n}\n\nfunction getCredentialsFromUrl(url: string): {username: string; password: string} |undefined {\n  if (!url) {\n    return undefined;\n  }\n  const urlInitialSplit = url.split('@');\n  if (urlInitialSplit.length === 2) {\n    const credential = urlInitialSplit[0].split('//')[1].split(':');\n    return { username: credential[0], password: credential[1] };\n  }\n  return undefined;\n}\n\nfunction getRealUrl(url: string): string {\n  const urlInitialSplit = url.split('@');\n  // TODO IF PASSWORD/USERNAME CONTAINS @, ALSO CHECK OTHER FILES SAME CODE\n  return `${urlInitialSplit[0].split('//')[0]}//${urlInitialSplit[1]}`;\n}\n"]}